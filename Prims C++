#include<iostream>
using namespace std;

class graph {
    int n;
    int edges;
    int cost[20][20];

public:
    void accept_graph();
    void display_graph();
    void prims();
};

void graph::accept_graph() {
    int c, d, s;
    cout << "enter no of vertices: ";
    cin >> n;
    cout << "enter no of edges: ";
    cin >> edges;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cost[i][j] = 999;
        }
    }
    for (int i = 0; i < edges; i++) {
        cout<<"Enter Source, Destination and cost between source and destination: ";
        cin>>s>>d>>c;
        cost[s][d] = c;
        cost[d][s] = c;
    }
}

void graph::display_graph() {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << cost[i][j] << " ";
        }
        cout << endl;
    }
}

void graph::prims() {
    int nearest[20];
    int r[10][3];
    int m = 0;
    int mincost = 0;
    int j, s;
    cout << "enter start vertex: ";
    cin >> s;
    nearest[s] = -1;
    for (int i = 0; i < n; i++) {
        if (i != s) {
            nearest[i] = s;
        }
    }
    for (int i = 0; i < n - 1; i++) {
        int min = 9999;
        for (int k = 0; k < n; k++) {
            if (nearest[k] != -1 && cost[k][nearest[k]] < min) {
                min = cost[k][nearest[k]];
                j = k;
            }
        }
        r[m][0] = nearest[j];
        r[m][1] = j;
        r[m][2] = cost[j][nearest[j]];
        m++;
        mincost = mincost + cost[j][nearest[j]];
        nearest[j] = -1;
        for (int k = 0; k < n; k++) {
            if (nearest[k] != -1 && cost[j][k] < cost[k][nearest[k]]) {
                nearest[k] = j;
            }
        }
    }
    for (int i = 0; i < m; i++) {
        for (int g = 0; g < 3; g++) {
            if(g==2)
            {
                cout<<" cost ";
            }
            cout << r[i][g] << " ";
        }
        cout << endl;
    }
    cout << "the min cost of spanning tree is " << mincost;
}

int main() {
    graph g;
    g.accept_graph();
    //g.display_graph();
    g.prims();
    return 0;
}
